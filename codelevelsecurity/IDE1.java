/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codelevelsecurity;

import codelevelsecurity.beans.ProgramAccessMasterBean;
import codelevelsecurity.beans.ProgramMasterBean;
import codelevelsecurity.beans.ProgramUpdateMasterBean;
import codelevelsecurity.services.ProgramAccessedServices;
import codelevelsecurity.services.EncryptionManager;
import codelevelsecurity.services.ProgramUpdateServices;
//import codelevelsecurity.services.SavedProgramsServices;
import codelevelsecurity.services.SavedProgramsServices_1;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author win8
 */
public class IDE1 extends javax.swing.JFrame {

    String tmpPath = "D:\\IDE\\";
    String fileName;
    boolean isSaved;
    String orgPath;
    ProgramMasterBean objbean;
    SavedProgramsServices_1 sps;
    int userId;
    String actext;
    String bctext;
    ProgramAccessedServices aps;

    /**
     * Creates new form IDE
     */
    public IDE1() {
        setUndecorated(true);
        initComponents();
        new File(tmpPath).mkdirs();
        setSize(Toolkit.getDefaultToolkit().getScreenSize());
        //setResizable(false);
        sps = new SavedProgramsServices_1();
        userId=sps.getUserId(LoginFrame.un);
        objbean = new ProgramMasterBean();

    }

    private void save() {
        if (isSaved == false) {
            JFileChooser jf = new JFileChooser("E:\\ide");
            int i = jf.showSaveDialog(this);
            if (i == JFileChooser.APPROVE_OPTION) {
                File f = jf.getSelectedFile();
                fileName = f.getName();
                orgPath = f.getPath();

                System.out.println("IDE1 user id is "+MainFrame.usrid);
               objbean.setUserId(MainFrame.usrid);
                //new SavedProgramsServices(); 
                objbean.setProgramName(fileName);
                //System.out.print(fileName);
                objbean.setProgramPath(orgPath);
                //System.out.print(orgPath);
                //new SavedProgramsServices_1().getCurrentDate(); 
                System.out.println("Current date:"+sps.getCurrentDate());
                objbean.setCreateDate(sps.getCurrentDate());
                sps.addProgramsMaster(objbean);

                if (f.exists()) {
                    int response = JOptionPane.showConfirmDialog(this, "Do you want to overwrite this file", "Confirm Dialog Box", JOptionPane.YES_NO_OPTION);
                    if (response != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
            } else {
                return;
            }
        }
        try {
            fw = new FileWriter(new File(tmpPath + File.separator + fileName));
            fw.write(taSource.getText());
            actext = taSource.getText();
            ProgramUpdateServices pus = new ProgramUpdateServices();
            System.out.println("is saved true");
            if (!bctext.equals(actext)) {
                ProgramUpdateMasterBean objpumb = new ProgramUpdateMasterBean();
                objpumb.setUpdateDate(sps.getCurrentDate());
                objpumb.setProgramId(aps.getProgramId(userId, fileName));
                pus.addProgramUpdateMaster(objpumb);
            }
            isSaved = true;
        } catch (Exception e) {
            System.out.println("miSaveActionPerformed: " + e);
        } finally {
            try {
                fw.close();
            } catch (Exception e) {
                System.out.println("miSaveActionPerformed: " + e);
            }
        }

        EncryptionManager obj = new EncryptionManager();
        obj.encryptSource(tmpPath + File.separator + fileName, orgPath);
    }

    /**
     * Creates new form IDE
     */
    FileReader fr = null;
    FileWriter fw = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taSource = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        taOutput = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        miSaveAs = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();
        mnuExecute = new javax.swing.JMenu();
        miCompile = new javax.swing.JMenuItem();
        miRun = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 92, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 415, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 238, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        taSource.setBackground(new java.awt.Color(204, 204, 255));
        taSource.setColumns(20);
        taSource.setRows(5);
        taSource.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 3));
        jScrollPane1.setViewportView(taSource);

        taOutput.setBackground(new java.awt.Color(204, 204, 255));
        taOutput.setColumns(20);
        taOutput.setRows(5);
        taOutput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 3));
        jScrollPane2.setViewportView(taOutput);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));

        mnuFile.setText("File");

        miNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miNew.setText("New");
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        mnuFile.add(miNew);

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpen.setText("Open");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        mnuFile.add(miOpen);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setText("Save");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        mnuFile.add(miSave);

        miSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miSaveAs.setText("SaveAs");
        miSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveAsActionPerformed(evt);
            }
        });
        mnuFile.add(miSaveAs);

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mnuFile.add(miExit);

        jMenuBar1.add(mnuFile);

        mnuExecute.setText("Execute");

        miCompile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        miCompile.setText("Compile");
        miCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCompileActionPerformed(evt);
            }
        });
        mnuExecute.add(miCompile);

        miRun.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        miRun.setText("Run");
        miRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRunActionPerformed(evt);
            }
        });
        mnuExecute.add(miRun);

        jMenuBar1.add(mnuExecute);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        taSource.setText("");
        taOutput.setText("");
        JFileChooser jf = new JFileChooser("E:\\ide\\");
        int i = jf.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            File f = jf.getSelectedFile();
            fileName = f.getName();
            orgPath = f.getPath();
            EncryptionManager obj = new EncryptionManager();
            obj.decryptSource(tmpPath + File.separator + fileName, orgPath);
            try {
                fr = new FileReader(tmpPath + File.separator + fileName);

                int a = 0;
                while ((a = fr.read()) != -1) {

                    taSource.append(String.valueOf((char) a));

                }
                bctext = taSource.getText();
                isSaved = true;
                aps = new ProgramAccessedServices();
                
                
                ProgramAccessMasterBean objamb = new ProgramAccessMasterBean();
                objamb.setAccessDate(sps.getCurrentDate());
                objamb.setUserId(userId);
                objamb.setProgramId(aps.getProgramId(userId, fileName));

                aps.addProgramAccessMaster(objamb);

            } catch (Exception e) {
                System.out.println("miOpenActionPerformed: " + e);
            } finally {
                try {

                    fr.close();
                } catch (Exception e) {
                    System.out.println("miOpenActionPerformed: " + e);
                }
            }
        }


    }//GEN-LAST:event_miOpenActionPerformed


    private void miNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActionPerformed

        if (!taSource.getText().isEmpty()) {
            if (isSaved == false) {
                save();
            }
        }
        taSource.setText("");
        taOutput.setText("");
        isSaved = false;

    }//GEN-LAST:event_miNewActionPerformed

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        System.out.println("Path "+tmpPath);
        File f = new File(tmpPath);

        File file[] = f.listFiles();
        if (file != null) {
            for (int i = 0; i < file.length; i++) {
                File file1 = file[i];

                file1.delete();

            }
        }
        f.delete();

        // file.delete();
        if (taSource.getText().isEmpty()) {
            this.dispose();
        } else if (isSaved == false) {
            this.dispose();
        } else {
            this.save();
            this.dispose();
        }


    }//GEN-LAST:event_miExitActionPerformed

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        if (!taSource.getText().isEmpty()) {

            save();
            taSource.setText("");
        }

        //JOptionPane.showMessageDialog(this, "File Saved", "save", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_miSaveActionPerformed

    private void miCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCompileActionPerformed
        String command = "javac -cp .; " + tmpPath + File.separator + fileName;
        System.out.println(command);
        Runtime rt = Runtime.getRuntime();
        try {

            Process p = rt.exec(command);
            InputStream ie = p.getErrorStream();
            InputStream is = p.getInputStream();

            int a = 0;
            while ((a = ie.read()) != -1) {

                taOutput.append(String.valueOf((char) a));
            }

            a = 0;
            while ((a = is.read()) != -1) {

                taOutput.append(String.valueOf((char) a));

            }

        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_miCompileActionPerformed

    private void miRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRunActionPerformed
        String fileName = this.fileName.substring(0, this.fileName.lastIndexOf("."));
        String command = "java -cp .;" + tmpPath + " " + fileName;
        System.out.println(command);
        Runtime rt = Runtime.getRuntime();
        try {

            Process p = rt.exec(command);
            InputStream ie = p.getErrorStream();
            InputStream is = p.getInputStream();

            int a = 0;
            while ((a = is.read()) != -1) {

                taOutput.append(String.valueOf((char) a));
            }

            a = 0;
            while ((a = ie.read()) != -1) {

                taOutput.append(String.valueOf((char) a));

            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_miRunActionPerformed

    private void miSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveAsActionPerformed
        //saveas();
        if (!taSource.getText().isEmpty()) {
            isSaved = false;

            save();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_miSaveAsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuItem miCompile;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miRun;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miSaveAs;
    private javax.swing.JMenu mnuExecute;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JTextArea taOutput;
    private javax.swing.JTextArea taSource;
    // End of variables declaration//GEN-END:variables
}
